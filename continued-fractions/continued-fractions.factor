! Copyright (C) 2020 Jordan Scales.
! See http://factorcode.org/license.txt for BSD license.
USING: kernel math sequences arrays ;
IN: continued-fractions

: eval ( arr -- float )
  [ 0 swap remove-nth ]
  [ 0 swap nth ]
  bi                  ! { a b c ... } -- { b c ... } a
  [ [ recip ] dip + ] ! a b -- (1/a + b)
  reduce ;

: 8frac ( n -- arr )
  [ 0 > { 3 } { } ? ] keep
  dup 0 >
      ! generate a string of n-1 6's and -6
      ! alternating, starting with -6
      [ 6 swap 1 - [ -1 * dup ] replicate nip ]
      [ { } nip ]
      if
  append
  reverse ;

! Alternative representation of sqrt(8)
: 8frac' ( n -- arr )
  [ 0 > { 2 } { } ? ] keep
  dup 0 >
      ! generate a string of n-1 1s and 4s
      ! alternating, starting with 1
      [ 4 swap 1 - [ 4 = [ 1 ] [ 4 ] if dup ] replicate nip ]
      [ { } nip ]
      if
  append
  reverse ;

! the first `count` integer pairs (K, N) s.t. 1 = K^2 - 8N^2
: 8pell ( count -- arr )
  0 swap [ 1 + dup ] replicate nip  ! [1..count]
  ! NOTE: If we want to use 8frac', we need to take every
  ! *other* evaluation, where the numerator is odd.
  [ 8frac eval [ numerator ] [ denominator ] bi 2array ]
  map ;

! Produce the first `count` pairs (k, n), such that there
! are k houses numbered 1 to k, you are at house n, and
! the sum of the house numbers to your left is equal to the
! sum of the house numbers to your right.
!
! EXPLANATION:
!   Using the triangle numbers, we can relate k and n:
!     1 = (2k+1)^2 - 8n^2
!   This can be represented as the Pell equation
!     1 = K^2 - 8N^2
!   Where integer (K, N) pairs can be generated by partially
!   evaluating the continued fraction of sqrt(8).
: houses ( count -- arr )
  8pell
  [
    [ 0 swap nth -1 + 2/ ]
    [ 1 swap nth ]
    bi
    2array
  ] map ;